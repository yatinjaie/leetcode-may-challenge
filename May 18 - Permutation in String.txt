Question - https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3333/

Logic - Basic idea is to use a Hash Table(Array of 26 characters) and match occurances of characters in both strings while traversing the string using sliding window method.

Code - 

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int n1 = s1.length();
        int n2 = s2.length();
        if(n1>n2){
            return false;
        }
        //s1 is small
       int[] countArr = new int[26];
        
        for(int i =0 ;i< n1 ;i++){
            countArr[s2.charAt(i) - 'a']++;
            countArr[s1.charAt(i) - 'a']--;
        }
        //print(countArr);
        for(int i = n1 ;i <n2; i++){
            if(checkAllZeros(countArr)){
                return true;
            }
            countArr[s2.charAt(i) - 'a']++;
            countArr[s2.charAt(i - n1) - 'a']--;
        }
        
         if(checkAllZeros(countArr)){
                return true;
            }
        
        return false;
    }
    
    boolean checkAllZeros(int[] countArr){
        for(int i = 0;i < countArr.length; i++){
            if(countArr[i]!= 0){
                return false;
            }
        }
        return true;
    }
    
    void print(int[] countArr){
        for(int i = 0;i < countArr.length; i++){
            System.out.println(countArr[i]);  
        }
    }
}
