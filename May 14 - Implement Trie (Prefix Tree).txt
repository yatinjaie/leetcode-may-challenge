Question - https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3329/

Logic - Basic idea is to use a HashSet as it insert and search in constant time. Also, startsWith method takes O(n) time.

Code - 

class Trie {
    
     static final int ALPHABET_SIZE = 26; 
    
   static class TrieNode{
       TrieNode[] children = new TrieNode[ALPHABET_SIZE];
       boolean isEndOfWord;
       
       TrieNode(){
           isEndOfWord =  false;
           for(int i =0 ;i < ALPHABET_SIZE ; i++){
               children[i] = null;
           }
       }
   }
    
    public TrieNode root;
    public Trie() {
        root = new TrieNode();
    } 
    
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
       int length = word.length();
       TrieNode node = root; 
       int index = 0;
       for(int i=0;i<length ;i++){
           index = word.charAt(i) - 'a'; 
           if(node.children[index] == null){
               node.children[index] = new TrieNode();
           }
           
           node = node.children[index];
       }
        node.isEndOfWord = true;      
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        int level; 
        int length = word.length(); 
        int index; 
        TrieNode node = root; 
       
        for (level = 0; level < length; level++) 
        { 
            index = word.charAt(level) - 'a'; 
       
            if (node.children[index] == null) 
                return false; 
       
            node = node.children[index]; 
        } 
       
        return (node != null && node.isEndOfWord); 
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
     int level; 
        int length = prefix.length(); 
        int index; 
        TrieNode node = root; 
       
        for (level = 0; level < length; level++) 
        { 
            index = prefix.charAt(level) - 'a'; 
       
            if (node.children[index] == null) 
                return false; 
       
            node = node.children[index]; 
        } 
       
        return (node != null);
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */